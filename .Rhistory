resi.std = array()
for (i in 1:1000){
x = rexp(100,2)
m = cumsum(x)
h = 1:n
resi = (h - 2*m)/sd(2*m)
resi.std[i] = sd(resi)
}
for (i in 1:1000){
x = rexp(100,2)
m = cumsum(x)
h = 1:100
resi = (h - 2*m)/sd(2*m)
resi.std[i] = sd(resi)
}
plot(1:1000,resi.std)
for (i in 1:1000){
x = rexp(100,2)
m = cumsum(x)
h = 1:100
resi = (h - 2*m)/sqrt(2*m)
resi.std[i] = sd(resi)
}
plot(1:1000,resi.std)
mean(resi.std)
sd(resi.std)
x.value = matrix(0, nrow = 5, ncol = 100)
resi.value = matrix(0, nrow = 5, ncol = 100)
for (j in 1:5){
x = rexp(100,2)
m = cumsum(x)
h = 1:100
resi = h - 2*m
for (i in 1:100){
x.value[j,i] = m[i]
resi.value[j,i] = resi[i]
}
}
x.value
for (i in 1:5){
plot(x.value[i,], resi.value[i,], xlim = range(x.value[i,]), ylim = range(resi.value[i,]),
xlab="t", ylab="N(t)-E(N(t))", main = "Residuals Plot",  pch=16)
m = x.value[i,]
resi = resi.value[i,]
lines(m[order(m)], resi[order(m)], xlim=range(m), ylim=range(resi), pch=16)
}
if (i == 1){
plot(x.value[i,], resi.value[i,], xlim = range(x.value[i,]), ylim = range(resi.value[i,]),
xlab="t", ylab="N(t)-E(N(t))", main = "Residuals Plot", col = colors[i], pch=16)
m = x.value[i,]
resi = resi.value[i,]
lines(m[order(m)], resi[order(m)], xlim=range(m), ylim=range(resi), pch=16, col = colors[i])
}
if (i > 1){
plot(x.value[i,], resi.value[i,], xlim = range(x.value[i,]), ylim = range(resi.value[i,]),
xlab="t", ylab="N(t)-E(N(t))", main = "Residuals Plot", col = colors[i], pch=16)
m = x.value[i,]
resi = resi.value[i,]
lines(m[order(m)], resi[order(m)], xlim=range(m), ylim=range(resi), pch=16, col = colors[i])
}
i = 2
if (i > 1){
plot(x.value[i,], resi.value[i,], xlim = range(x.value[i,]), ylim = range(resi.value[i,]),
xlab="t", ylab="N(t)-E(N(t))", main = "Residuals Plot", col = colors[i], pch=16)
m = x.value[i,]
resi = resi.value[i,]
lines(m[order(m)], resi[order(m)], xlim=range(m), ylim=range(resi), pch=16, col = colors[i])
}
for (i in 1:2){
if (i == 1){
plot(x.value[i,], resi.value[i,], xlim = range(x.value[i,]), ylim = range(resi.value[i,]),
xlab="t", ylab="N(t)-E(N(t))", main = "Residuals Plot", col = colors[i], pch=16)
m = x.value[i,]
resi = resi.value[i,]
lines(m[order(m)], resi[order(m)], xlim=range(m), ylim=range(resi), pch=16, col = colors[i])
}
if (i > 1){
plot(x.value[i,], resi.value[i,], xlim = range(x.value[i,]), ylim = range(resi.value[i,]),
xlab="t", ylab="N(t)-E(N(t))", main = "Residuals Plot", col = colors[i], pch=16)
m = x.value[i,]
resi = resi.value[i,]
lines(m[order(m)], resi[order(m)], xlim=range(m), ylim=range(resi), pch=16, col = colors[i])
}
}
x.value = matrix(0, nrow = 5, ncol = 100)
resi.value = matrix(0, nrow = 5, ncol = 100)
for (j in 1:5){
x = rexp(100,2)
m = cumsum(x)
h = 1:100
resi = h - 2*m
for (i in 1:100){
x.value[j,i] = m[i]
resi.value[j,i] = resi[i]
}
}
x.value
resi.value
range(resi.value)
max(range(resi.value))
x.value = matrix(0, nrow = 5, ncol = 100)
y.value = matrix(0, nrow = 5, ncol = 100)
for (j in 1:5){
x = rexp(100,2)
m = cumsum(x)
h = 1:100
for (i in 1:100){
x.value[j,i] = m[i]
y[j,i] = h[i]
}
}
for (j in 1:5){
x = rexp(100,2)
m = cumsum(x)
h = 1:100
for (i in 1:100){
x.value[j,i] = m[i]
y.value[j,i] = h[i]
}
}
x.value
y.value
for (i in 1:2){
if (i == 1){
plot(x.value[i,], resi.value[i,], xlim = range(x.value[i,]), ylim = range(resi.value[i,]),
xlab="t", ylab="N(t)-E(N(t))", main = "Residuals Plot", col = colors[i], pch=16)
m = x.value[i,]
resi = resi.value[i,]
lines(m[order(m)], resi[order(m)], xlim=range(m), ylim=range(resi), pch=16, col = colors[i])
}
if (i > 1){
plot(x.value[i,], resi.value[i,], xlim = range(x.value[i,]), ylim = range(resi.value[i,]),
xlab="t", ylab="N(t)-E(N(t))", main = "Residuals Plot", col = colors[i], pch=16)
m = x.value[i,]
resi = resi.value[i,]
lines(m[order(m)], resi[order(m)], xlim=range(m), ylim=range(resi), pch=16, col = colors[i])
}
}
plot(x.value[i,], resi.value[i,], xlim = range(x.value[i,]), ylim = range(resi.value[i,]),
xlab="t", ylab="N(t)-E(N(t))", main = "Residuals Plot", col = colors[i], pch=16)
m = x.value[i,]
resi = resi.value[i,]
lines(m[order(m)], resi[order(m)], xlim=range(m), ylim=range(resi), pch=16, col = colors[i])
x.value = matrix(0, nrow = 5, ncol = 100)
y.value = matrix(0, nrow = 5, ncol = 100)
for (j in 1:5){
x = rexp(100,2)
m = cumsum(x)
h = 1:100
for (i in 1:100){
x.value[j,i] = m[i]
y.value[j,i] = h[i]
}
}
x.value
y.value
hist(x.value,y.value)
hist(x.value[1,],y.value[1,])
inter.arr = c(0,x.value)
inter.arr
inter.arr = c(0,x.value[1,])
inter.arr
arr = c(0,x.value[1,])
interarr = array()
for (i in 1:100){
interarr[i] = arr[i+1] - arr[i]
}
interarr
hist(y.value[1,],breaks = interarr)
hist(y.value[1,])
hist(interarr,breaks = 0.1)
hist(interarr,breaks = 20)
library(ggplot2)
x.value = matrix(0, nrow = 100, ncol = 5)
y.value = matrix(0, nrow = 100, ncol = 5)
arr = matrix(0,nrow=100,ncol=5)
for (i in 1:5){
x = rexp(100,2)
m = cumsum(x)
h = 1:100
for (j in 1:100){
x.value[j,i] = m[i]
y.value[j,i] = h[i]
}
}
x.value
y.value
x = rexp(100,2)
x
m = cumsum(x)
m
h
x.value = matrix(0, nrow = 100, ncol = 5)
y.value = matrix(0, nrow = 100, ncol = 5)
for (i in 1:5){
x = rexp(100,2)
m = cumsum(x)
h = 1:100
for (j in 1:100){
x.value[j,i] = m[i]
y.value[j,i] = h[i]
}
}
x.value
m
x = rexp(100,2)
m = cumsum(x)
h = 1:100
k=array()
for(i in 1:100){
k[i] = m[i]
}
k
x.value = matrix(0, nrow = 5, ncol = 100)
y.value = matrix(0, nrow = 5, ncol = 100)
for (j in 1:5){
x = rexp(100,2)
m = cumsum(x)
for (i in 1:100){
x.value[j,i] = m[i]
}
}
x.value
x.value = matrix(0, nrow = 100, ncol = 5)
y.value = matrix(0, nrow = 100, ncol = 5)
for (i in 1:5){
x = rexp(100,2)
m = cumsum(x)
for (j in 1:100){
x.value[j,i] = m[j]
}
}
x.value
arr = matrix(0,nrow=100,ncol=5)
arr = rbind(matrix(0,nrow=1,ncol=5),x.value)
arr
inter.arr = matrix(0,100,5)
for (i in 1:5){
for (j in 1:100){
inter.arr[j,i] = arr[j+1,i] - arr[j,i]
}
}
inter.arr
colnames(inter.arr) = c("a","b","c","d","e")
par(mfrow = c(3,2))
inter.arr
hist(inter.arr[,1],breaks = 20)
par(mfrow = c(1,1))
x.value = matrix(0, nrow = 5, ncol = 100)
y.value = matrix(0, nrow = 5, ncol = 100)
for (j in 1:5){
x = rexp(100,2)
m = cumsum(x)
for (i in 1:100){
x.value[j,i] = m[i]
}
}
m
x.value = matrix(0, nrow = 5, ncol = 100)
for (j in 1:5){
x = rexp(100,2)
m = cumsum(x)
for (i in 1:100){
x.value[j,i] = m[i]
}
}
arr = cbind(matrix(0,nrow=5,ncol=1),x.value)
inter.arr = data.frame()
Int = data.frame()
Group = data.frame()
for (i in 1:5){
for (j in 1:100){
Int[j + 100*(i - 1), 1] = arr[i,j+1] - arr[i,j]
Group[j + 100*(i - 1), 1] = i
}
inter.arr = cbind(Int,Group)
}
names(inter.arr) = c("Int","Group")
colors = c("#3CA2C8", "#10559A","#CC6BB1", "#F9C6D7","#DB4C77")
ggplot(inter.arr, aes(x = Int, fill = factor(Group))) +
geom_dotplot(stackgroups = TRUE, binwidth = method = "histodot")
library(ggplot2)
ggplot(inter.arr, aes(x = Int, fill = factor(Group))) +
geom_dotplot(stackgroups = TRUE, binwidth = method = "histodot")
g1 <- ggplot(inter.arr, aes(x = Int, fill = factor(Group))) +
geom_dotplot(stackgroups = TRUE, binwidth = method = "histodot")
print(g1)
g1 <- ggplot(inter.arr, aes(x = Int, fill = factor(Group))) +
geom_dotplot(stackgroups = TRUE,  method = "histodot")
print(g1)
ggplot(inter.arr, aes(x = Int, fill = factor(Group))) +
geom_dotplot(stackgroups = TRUE, binwidth = 0.05  method = "histodot")
ggplot(inter.arr, aes(x = Int, fill = factor(Group))) +
geom_dotplot(stackgroups = TRUE, binwidth = 0.05 , method = "histodot")
for (j in 1:5){
x = rexp(100,0.1)
m = cumsum(x)
for (i in 1:100){
x.value[j,i] = m[i]
}
}
arr = cbind(matrix(0,nrow=5,ncol=1),x.value)
inter.arr = data.frame()
Int = data.frame()
Group = data.frame()
for (i in 1:5){
for (j in 1:100){
Int[j + 100*(i - 1), 1] = arr[i,j+1] - arr[i,j]
Group[j + 100*(i - 1), 1] = i
}
inter.arr = cbind(Int,Group)
}
inter.arr, aes(x = Int, fill = factor(Group))) +
geom_dotplot(stackgroups = TRUE, binwidth = 0.05 , method = "histodot")
ggplot(inter.arr, aes(x = Int, fill = factor(Group))) +
geom_dotplot(stackgroups = TRUE, binwidth = 0.05 , method = "histodot")
x.value = matrix(0, nrow = 5, ncol = 100)
for (j in 1:5){
x = rexp(100,0.1)
m = cumsum(x)
for (i in 1:100){
x.value[j,i] = m[i]
}
}
arr = cbind(matrix(0,nrow=5,ncol=1),x.value)
inter.arr = data.frame()
Int = data.frame()
Group = data.frame()
for (i in 1:5){
for (j in 1:100){
Int[j + 100*(i - 1), 1] = arr[i,j+1] - arr[i,j]
Group[j + 100*(i - 1), 1] = i
}
inter.arr = cbind(Int,Group)
}
names(inter.arr) = c("Int","Group")
colors = c("#3CA2C8", "#10559A","#CC6BB1", "#F9C6D7","#DB4C77")
ggplot(inter.arr, aes(x = Int, fill = factor(Group))) +
geom_dotplot(stackgroups = TRUE, binwidth = 0.05 , method = "histodot")
ggplot(inter.arr, aes(x = Int, fill = factor(Group))) +
geom_dotplot(stackgroups = TRUE, binwidth = 2 , method = "histodot")
ggplot(inter.arr, aes(x = Int, fill = factor(Group))) +
geom_dotplot(stackgroups = TRUE, binwidth = 4 , method = "histodot")
ggplot(inter.arr, aes(x = Int, fill = factor(Group))) +
geom_dotplot(stackgroups = TRUE, binwidth = 1.5 , method = "histodot")
ggplot(inter.arr, aes(x = Int, fill = factor(Group))) +
geom_dotplot(stackgroups = TRUE, binwidth = 1 , method = "histodot")
ggplot(inter.arr, aes(x = Int, fill = factor(Group))) +
geom_dotplot(stackgroups = TRUE, binwidth = 1.3 , method = "histodot")
ggplot(inter.arr, aes(x = Int, fill = factor(Group))) +
geom_dotplot(stackgroups = TRUE, binwidth = 1.2 , method = "histodot")
for (i in 1:5){
x = rexp(200,10)
m = cumsum(x)
for (j in 1:100){
x.value[j,i] = m[j]
}
}
x.value = matrix(0, nrow = 5, ncol = 100)
for (j in 1:5){
x = rexp(200,10)
m = cumsum(x)
for (i in 1:100){
x.value[j,i] = m[i]
}
}
arr = cbind(matrix(0,nrow=5,ncol=1),x.value)
inter.arr = data.frame()
Int = data.frame()
Group = data.frame()
for (i in 1:5){
for (j in 1:100){
Int[j + 100*(i - 1), 1] = arr[i,j+1] - arr[i,j]
Group[j + 100*(i - 1), 1] = i
}
inter.arr = cbind(Int,Group)
}
ggplot(inter.arr, aes(x = Int, fill = factor(Group))) +
geom_dotplot(stackgroups = TRUE, binwidth = 1.2 , method = "histodot")
x.value = matrix(0, nrow = 5, ncol = 100)
for (j in 1:5){
x = rexp(200,10)
m = cumsum(x)
for (i in 1:100){
x.value[j,i] = m[i]
}
}
arr = cbind(matrix(0,nrow=5,ncol=1),x.value)
inter.arr = data.frame()
Int = data.frame()
Group = data.frame()
for (i in 1:5){
for (j in 1:100){
Int[j + 100*(i - 1), 1] = arr[i,j+1] - arr[i,j]
Group[j + 100*(i - 1), 1] = i
}
inter.arr = cbind(Int,Group)
}
names(inter.arr) = c("Int","Group")
ggplot(inter.arr, aes(x = Int, fill = factor(Group))) +
geom_dotplot(stackgroups = TRUE, binwidth = 1.2 , method = "histodot")
ggplot(inter.arr, aes(x = Int, fill = factor(Group))) +
geom_dotplot(stackgroups = TRUE, binwidth = 0.01 , method = "histodot")
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
install.packages("shinycssloaders")
runApp()
shiny::runApp()
shiny::runApp()
runApp()
values$num
values$num <- sample(1:6, 1, replace = FALSE)
values <- reactiveValues()
values$num <- sample(1:6, 1, replace = FALSE)
values$num
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
values$num
values$num <- sample(1:6, 1, replace = FALSE)
values <- reactiveValues()
values$num <- sample(1:6, 1, replace = FALSE)
values$num
View(values)
values <- reactiveValues()
values
values$num <- sample(1:6, 1, replace = FALSE)
values$num
isolate(values$num)
runApp()
isolate(values$num)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
